$version Generated by VerilatedVcd $end
$date Mon May 28 23:37:52 2018
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 "h clk_i $end
  $var wire  4 "l ex_alu_op [3:0] $end
  $var wire  1 "t ex_bad_branch_addr $end
  $var wire  1 "r ex_bad_jump_addr $end
  $var wire  1 "s ex_branch_op $end
  $var wire  1 "v ex_break_op $end
  $var wire  1 "y ex_csr_imm_op $end
  $var wire  3 "x ex_csr_op [2:0] $end
  $var wire  1 "z ex_exc_addr_if_o $end
  $var wire  1 "q ex_jump_op $end
  $var wire  1 "p ex_mem_ex_sel $end
  $var wire  6 "o ex_mem_flags [5:0] $end
  $var wire 32 "j ex_port_a [31:0] $end
  $var wire 32 "k ex_port_b [31:0] $end
  $var wire  1 "{ ex_ready $end
  $var wire  1 "w ex_syscall_op $end
  $var wire  5 "m ex_waddr [4:0] $end
  $var wire  1 "n ex_we $end
  $var wire  1 "i rst_i $end
  $var wire  1 "u take_branch $end
  $scope module ifid_stage $end
   $var wire  1 "h clk_i $end
   $var wire  4 "l ex_alu_op [3:0] $end
   $var wire  1 "t ex_bad_branch_addr $end
   $var wire  1 "r ex_bad_jump_addr $end
   $var wire  1 "s ex_branch_op $end
   $var wire  1 "v ex_break_op $end
   $var wire  1 "y ex_csr_imm_op $end
   $var wire  3 "x ex_csr_op [2:0] $end
   $var wire  1 #! ex_exc_addr_if $end
   $var wire  1 "z ex_exc_addr_if_o $end
   $var wire  1 "q ex_jump_op $end
   $var wire  1 "p ex_mem_ex_sel $end
   $var wire  6 "o ex_mem_flags [5:0] $end
   $var wire 32 "j ex_port_a [31:0] $end
   $var wire 32 "k ex_port_b [31:0] $end
   $var wire  1 "{ ex_ready $end
   $var wire  1 "w ex_syscall_op $end
   $var wire  5 "m ex_waddr [4:0] $end
   $var wire  1 "n ex_we $end
   $var wire  1 "} exc_addr_if $end
   $var wire  1 "~ forward_sel $end
   $var wire  1 "F id_exc_addr $end
   $var wire 32 "E id_instruction [31:0] $end
   $var wire 32 "C id_pc [31:0] $end
   $var wire 32 "D id_pc_add4 [31:0] $end
   $var wire  1 "G id_ready_o $end
   $var wire  1 "| if_stall $end
   $var wire 32 "6 pc_branch_address [31:0] $end
   $var wire 32 "? pc_jump_address [31:0] $end
   $var wire  1 "i rst_i $end
   $var wire  1 "u take_branch $end
   $scope module ID $end
    $var wire  4 - alu_op [3:0] $end
    $var wire  1 "8 bad_branch_addr $end
    $var wire  1 "7 bad_jump_addr $end
    $var wire  1 #I bad_jump_address $end
    $var wire  1 4 branch_op $end
    $var wire  1 "\ break_op $end
    $var wire  1 "h clk_i $end
    $var wire  3 "< comparator_op [2:0] $end
    $var wire  1 6 csr_imm_op $end
    $var wire  3 5 csr_op [2:0] $end
    $var wire 32 #G drd [31:0] $end
    $var wire 32 ": drs1 [31:0] $end
    $var wire 32 + drs2 [31:0] $end
    $var wire  4 "l ex_alu_op [3:0] $end
    $var wire  1 "t ex_bad_branch_addr $end
    $var wire  1 "r ex_bad_jump_addr $end
    $var wire  1 "s ex_branch_op $end
    $var wire  1 "v ex_break_op $end
    $var wire  1 "y ex_csr_imm_op $end
    $var wire  3 "x ex_csr_op [2:0] $end
    $var wire  1 #! ex_exc_addr_if $end
    $var wire  1 "^ ex_exc_address_if $end
    $var wire  1 "q ex_jump_op $end
    $var wire  1 "p ex_mem_ex_sel $end
    $var wire  6 "o ex_mem_flags [5:0] $end
    $var wire 32 "j ex_port_a [31:0] $end
    $var wire 32 "k ex_port_b [31:0] $end
    $var wire  1 "{ ex_ready $end
    $var wire  1 "~ ex_stall $end
    $var wire  1 "w ex_syscall_op $end
    $var wire  5 "m ex_waddr [4:0] $end
    $var wire  1 "n ex_we $end
    $var wire  1 "F exc_address_if $end
    $var wire 32 #D forwardA [31:0] $end
    $var wire 32 #E forwardB [31:0] $end
    $var wire  1 "~ forward_sel $end
    $var wire  1 "G id_ready $end
    $var wire 32 "= imm [31:0] $end
    $var wire 32 #H immediate [31:0] $end
    $var wire 32 "E instruction [31:0] $end
    $var wire  1 0 jalr_op $end
    $var wire  1 3 jump_op $end
    $var wire  1 2 mem_ex_sel $end
    $var wire  6 1 mem_flags [5:0] $end
    $var wire  1 #C mem_stall $end
    $var wire 32 ": muxa_i [31:0] $end
    $var wire 32 + muxb_i [31:0] $end
    $var wire 32 "C pc [31:0] $end
    $var wire 32 "D pc_add4 [31:0] $end
    $var wire 32 "6 pc_branch_address [31:0] $end
    $var wire 32 "? pc_jump_address [31:0] $end
    $var wire 32 "B port_a [31:0] $end
    $var wire 32 "> port_b [31:0] $end
    $var wire  1 / porta_sel $end
    $var wire  1 . portb_sel $end
    $var wire  5 #F rd [4:0] $end
    $var wire  5 "; rs1 [4:0] $end
    $var wire  5 "Z rs2 [4:0] $end
    $var wire  1 "i rst_i $end
    $var wire  1 "] syscall_op $end
    $var wire  1 "u take_branch $end
    $var wire  5 "[ waddr [4:0] $end
    $var wire  5 #A wb_address [4:0] $end
    $var wire 32 #@ wb_data [31:0] $end
    $var wire  1 #B wb_we $end
    $var wire  1 , we $end
    $scope module BP $end
     $var wire  3 #J beq [2:0] $end
     $var wire  3 #M bge [2:0] $end
     $var wire  3 #O bgeu [2:0] $end
     $var wire  3 #L blt [2:0] $end
     $var wire  3 #N bltu [2:0] $end
     $var wire  3 #K bne [2:0] $end
     $var wire 32 ": drs1 [31:0] $end
     $var wire 32 + drs2 [31:0] $end
     $var wire  3 #P nop [2:0] $end
     $var wire 32 ": sdrs1 [31:0] $end
     $var wire 32 + sdrs2 [31:0] $end
     $var wire  3 "< sel [2:0] $end
     $var wire  1 "u take_branch $end
     $var wire 32 ": udrs1 [31:0] $end
     $var wire 32 + udrs2 [31:0] $end
    $upscope $end
    $scope module DCU $end
     $var wire  1 u add $end
     $var wire  1 l addi $end
     $var wire  4 - alu_op [3:0] $end
     $var wire  1 q andi $end
     $var wire  1 \ auipc $end
     $var wire  1 ^ beq $end
     $var wire  1 a bge $end
     $var wire  1 c bgeu $end
     $var wire  1 ` blt $end
     $var wire  1 b bltu $end
     $var wire  1 _ bne $end
     $var wire  1 4 branch_op $end
     $var wire  1 "\ break_op $end
     $var wire  1 "] call $end
     $var wire  3 "< comparator_op [2:0] $end
     $var wire  1 6 csr_imm_op $end
     $var wire  3 5 csr_op [2:0] $end
     $var wire  1 #S fence $end
     $var wire  3 "` func3 [2:0] $end
     $var wire  7 "a func7 [6:0] $end
     $var wire 32 "= imm [31:0] $end
     $var wire 32 "E inst [31:0] $end
     $var wire 32 "E instruction [31:0] $end
     $var wire  1 "% is_add $end
     $var wire  1 "/ is_alu $end
     $var wire  1 "' is_and $end
     $var wire  1 4 is_b $end
     $var wire  1 #T is_bu $end
     $var wire  1 "3 is_byte $end
     $var wire  1 "1 is_csr $end
     $var wire  1 6 is_csri $end
     $var wire  1 "4 is_hw $end
     $var wire  1 "$ is_imm $end
     $var wire  1 "0 is_immop $end
     $var wire  1 3 is_j $end
     $var wire  1 Y is_ld $end
     $var wire  1 Z is_ldu $end
     $var wire  1 ") is_or $end
     $var wire  1 "* is_sll $end
     $var wire  1 ", is_slt $end
     $var wire  1 "- is_sltu $end
     $var wire  1 "+ is_sr $end
     $var wire  1 X is_st $end
     $var wire  1 "& is_sub $end
     $var wire  1 "2 is_word $end
     $var wire  1 ". is_wr $end
     $var wire  1 "( is_xor $end
     $var wire  1 ] jal $end
     $var wire  1 0 jalr $end
     $var wire  1 0 jalr_op $end
     $var wire  1 3 jump_op $end
     $var wire  1 d lb $end
     $var wire  1 g lbu $end
     $var wire  1 e lh $end
     $var wire  1 h lhu $end
     $var wire  1 [ lui $end
     $var wire  1 f lw $end
     $var wire  3 W mem_access [2:0] $end
     $var wire  1 #Q mem_b $end
     $var wire  1 2 mem_ex_s $end
     $var wire  1 2 mem_ex_sel $end
     $var wire  6 1 mem_flags [5:0] $end
     $var wire  1 #R mem_hw $end
     $var wire  1 Y mem_r $end
     $var wire  1 Z mem_unsigned $end
     $var wire  1 X mem_wr $end
     $var wire  1 "b nop $end
     $var wire  7 "_ opcode [6:0] $end
     $var wire  1 p ori $end
     $var wire  1 / porta_sel $end
     $var wire  1 . portb_sel $end
     $var wire  1 ~ rc $end
     $var wire  1 "# rci $end
     $var wire  5 "[ rd [4:0] $end
     $var wire  1 , reg_write $end
     $var wire  1 "c ret $end
     $var wire  1 } rs $end
     $var wire  5 "; rs1 [4:0] $end
     $var wire  5 "Z rs2 [4:0] $end
     $var wire  1 "" rsi $end
     $var wire  1 | rw $end
     $var wire  1 "! rwi $end
     $var wire  1 i sb $end
     $var wire  1 j sh $end
     $var wire  1 w sll $end
     $var wire  1 r slli $end
     $var wire  1 x slt $end
     $var wire  1 m slti $end
     $var wire  1 n sltiu $end
     $var wire  1 y sltu $end
     $var wire  1 { sra $end
     $var wire  1 t srai $end
     $var wire  1 z srl $end
     $var wire  1 s srli $end
     $var wire  1 v sub $end
     $var wire  1 k sw $end
     $var wire  1 "] syscall_op $end
     $var wire  1 o xori $end
    $upscope $end
    $scope module FORWARD_A_MUX $end
     $var wire 32 ": in_0 [31:0] $end
     $var wire 32 #D in_1 [31:0] $end
     $var wire 32 ": out [31:0] $end
     $var wire  1 "~ sel $end
    $upscope $end
    $scope module FORWARD_B_MUX $end
     $var wire 32 + in_0 [31:0] $end
     $var wire 32 #E in_1 [31:0] $end
     $var wire 32 + out [31:0] $end
     $var wire  1 "~ sel $end
    $upscope $end
    $scope module ID_EX $end
     $var wire  1 "h clk $end
     $var wire  4 "l ex_alu_op [3:0] $end
     $var wire  1 "t ex_bad_branch_addr $end
     $var wire  1 "r ex_bad_jump_addr $end
     $var wire  1 "v ex_break_op $end
     $var wire  1 "y ex_csr_imm_op $end
     $var wire  3 "x ex_csr_op [2:0] $end
     $var wire  1 "^ ex_exc_addr_if $end
     $var wire  1 "p ex_mem_ex_sel $end
     $var wire  6 "o ex_mem_flags [5:0] $end
     $var wire 32 "j ex_porta [31:0] $end
     $var wire 32 "k ex_portb [31:0] $end
     $var wire  1 "{ ex_ready $end
     $var wire  1 "w ex_syscall_op $end
     $var wire  5 "m ex_waddr [4:0] $end
     $var wire  1 "n ex_we $end
     $var wire  1 #U flush $end
     $var wire  4 - id_alu_op [3:0] $end
     $var wire  1 "8 id_bad_branch_addr $end
     $var wire  1 "7 id_bad_jump_addr $end
     $var wire  1 "\ id_break_op $end
     $var wire  1 6 id_csr_imm_op $end
     $var wire  3 5 id_csr_op [2:0] $end
     $var wire  1 "F id_exc_addr_if $end
     $var wire  1 2 id_mem_ex_sel $end
     $var wire  6 1 id_mem_flags [5:0] $end
     $var wire 32 "B id_porta [31:0] $end
     $var wire 32 "> id_portb [31:0] $end
     $var wire  1 "G id_ready $end
     $var wire  1 "] id_syscall_op $end
     $var wire  5 "[ id_waddr [4:0] $end
     $var wire  1 , id_we $end
     $var wire  1 "i rst $end
     $var wire  1 "~ stall $end
    $upscope $end
    $scope module PORT_A_MUX $end
     $var wire 32 ": in_0 [31:0] $end
     $var wire 32 "C in_1 [31:0] $end
     $var wire 32 "B out [31:0] $end
     $var wire  1 / sel $end
    $upscope $end
    $scope module PORT_B_MUX $end
     $var wire 32 + in_0 [31:0] $end
     $var wire 32 "= in_1 [31:0] $end
     $var wire 32 "> out [31:0] $end
     $var wire  1 . sel $end
    $upscope $end
    $scope module RF $end
     $var wire  1 "h clk $end
     $var wire  5 "; raddr_rs1 [4:0] $end
     $var wire  5 "Z raddr_rs2 [4:0] $end
     $var wire 32 ": rdata_rs1 [31:0] $end
     $var wire 32 + rdata_rs2 [31:0] $end
     $var wire 32 7 reg_file(0) [31:0] $end
     $var wire 32 8 reg_file(1) [31:0] $end
     $var wire 32 A reg_file(10) [31:0] $end
     $var wire 32 B reg_file(11) [31:0] $end
     $var wire 32 C reg_file(12) [31:0] $end
     $var wire 32 D reg_file(13) [31:0] $end
     $var wire 32 E reg_file(14) [31:0] $end
     $var wire 32 F reg_file(15) [31:0] $end
     $var wire 32 G reg_file(16) [31:0] $end
     $var wire 32 H reg_file(17) [31:0] $end
     $var wire 32 I reg_file(18) [31:0] $end
     $var wire 32 J reg_file(19) [31:0] $end
     $var wire 32 9 reg_file(2) [31:0] $end
     $var wire 32 K reg_file(20) [31:0] $end
     $var wire 32 L reg_file(21) [31:0] $end
     $var wire 32 M reg_file(22) [31:0] $end
     $var wire 32 N reg_file(23) [31:0] $end
     $var wire 32 O reg_file(24) [31:0] $end
     $var wire 32 P reg_file(25) [31:0] $end
     $var wire 32 Q reg_file(26) [31:0] $end
     $var wire 32 R reg_file(27) [31:0] $end
     $var wire 32 S reg_file(28) [31:0] $end
     $var wire 32 T reg_file(29) [31:0] $end
     $var wire 32 : reg_file(3) [31:0] $end
     $var wire 32 U reg_file(30) [31:0] $end
     $var wire 32 V reg_file(31) [31:0] $end
     $var wire 32 ; reg_file(4) [31:0] $end
     $var wire 32 < reg_file(5) [31:0] $end
     $var wire 32 = reg_file(6) [31:0] $end
     $var wire 32 > reg_file(7) [31:0] $end
     $var wire 32 ? reg_file(8) [31:0] $end
     $var wire 32 @ reg_file(9) [31:0] $end
     $var wire  5 #A waddr_rd [4:0] $end
     $var wire 32 #@ wdata_rd [31:0] $end
     $var wire  1 #B we $end
    $upscope $end
   $upscope $end
   $scope module IF $end
    $var wire  1 "h clk_i $end
    $var wire  1 "F exc_addr_o $end
    $var wire  1 "M id_exc_addr_o $end
    $var wire 32 "E id_instruction_o [31:0] $end
    $var wire 32 "D id_pc_add4 [31:0] $end
    $var wire 32 "C id_pc_o [31:0] $end
    $var wire  1 "G id_ready_o $end
    $var wire 32 "d if_instruction_o [31:0] $end
    $var wire 32 "J if_pc_add4 [31:0] $end
    $var wire 32 "H if_pc_mux [31:0] $end
    $var wire 32 "I if_pc_o [31:0] $end
    $var wire  1 "5 if_stall $end
    $var wire  1 "5 if_stall_ $end
    $var wire 32 #" pc_branch_address [31:0] $end
    $var wire 32 ## pc_jump_address [31:0] $end
    $var wire  2 #$ pc_sel [1:0] $end
    $var wire  1 "i rst_i $end
    $var wire  1 "9 wbm_ack_i $end
    $var wire 32 "K wbm_addr_o [31:0] $end
    $var wire  1 "e wbm_cyc_o $end
    $var wire 32 "@ wbm_dat_i [31:0] $end
    $var wire 32 #% wbm_dat_o [31:0] $end
    $var wire  1 "A wbm_err_i $end
    $var wire  1 "L wbm_ready_o $end
    $var wire  4 $ wbm_sel_o [3:0] $end
    $var wire  1 "f wbm_stb_o $end
    $scope module BRAM $end
     $var wire  1 "9 ack_o $end
     $var wire 32 "K addr_i [31:0] $end
     $var wire  1 "g b_state $end
     $var wire  1 #= b_str [0:0] $end
     $var wire  1 #> b_tx [0:0] $end
     $var wire  1 "h clk $end
     $var wire  1 "e cyc_i $end
     $var wire 32 #9 dat_i [31:0] $end
     $var wire 32 "@ dat_o [31:0] $end
     $var wire  1 "A err_o $end
     $var wire  8 #; rdat [7:0] $end
     $var wire  1 "i rst $end
     $var wire  4 $ sel_i [3:0] $end
     $var wire  1 "f stb_i $end
     $var wire  8 #< wdat [7:0] $end
     $var wire  1 #: we_i $end
    $upscope $end
    $scope module IF_ID $end
     $var wire  1 "h clk $end
     $var wire  1 #? flush $end
     $var wire  1 "M id_exc_addr $end
     $var wire 32 "E id_inst [31:0] $end
     $var wire 32 "C id_pc [31:0] $end
     $var wire 32 "D id_pc_add4 [31:0] $end
     $var wire  1 "G id_ready $end
     $var wire  1 "F if_exc_addr $end
     $var wire 32 "d if_inst [31:0] $end
     $var wire 32 "I if_pc [31:0] $end
     $var wire 32 "J if_pc_add4 [31:0] $end
     $var wire  1 "L if_ready $end
     $var wire  1 "i rst $end
     $var wire  1 "5 stall $end
    $upscope $end
    $scope module LSU $end
     $var wire  1 "N abort $end
     $var wire  1 "h clk $end
     $var wire  2 #5 d_err [1:0] $end
     $var wire  2 #3 d_rx [1:0] $end
     $var wire  2 "X d_state [1:0] $end
     $var wire  2 #2 d_str [1:0] $end
     $var wire  2 #4 d_tx [1:0] $end
     $var wire  1 #0 dack_i $end
     $var wire 32 "Q daddr_o [31:0] $end
     $var wire 32 & data_o [31:0] $end
     $var wire  1 "S dcyc_o $end
     $var wire 32 #/ ddat_i [31:0] $end
     $var wire 32 "R ddat_o [31:0] $end
     $var wire  1 #1 derr_i $end
     $var wire  4 ' dsel_o [3:0] $end
     $var wire  1 "T dstb_o $end
     $var wire  1 "U dwe_o $end
     $var wire  2 #3 i_ab [1:0] $end
     $var wire  2 #4 i_err [1:0] $end
     $var wire  2 "W i_state [1:0] $end
     $var wire  2 #2 i_str [1:0] $end
     $var wire  1 "9 iack_i $end
     $var wire 32 "K iaddr_o [31:0] $end
     $var wire  1 "e icyc_o $end
     $var wire 32 "@ idat_i [31:0] $end
     $var wire 32 # idat_o [31:0] $end
     $var wire  1 "A ierr_i $end
     $var wire  1 "5 if_stall $end
     $var wire  1 "Y if_stall_aux $end
     $var wire  1 "F inst_misaligned $end
     $var wire 32 "d instruction [31:0] $end
     $var wire  4 $ isel_o [3:0] $end
     $var wire  1 "f istb_o $end
     $var wire 32 #' maddr_i [31:0] $end
     $var wire  1 #+ mbyte $end
     $var wire 32 #( mdat_i [31:0] $end
     $var wire  1 "P mem_bus_err $end
     $var wire  1 "O mem_stall $end
     $var wire  1 #, mhw $end
     $var wire  1 #) mread $end
     $var wire  1 #. munsigned $end
     $var wire  1 #- mword $end
     $var wire  1 #* mwrite $end
     $var wire  1 % no_mem $end
     $var wire 64 ) no_rps [63:0] $end
     $var wire 32 #8 nop [31:0] $end
     $var wire 64 #6 nrps [63:0] $end
     $var wire 32 "I pc [31:0] $end
     $var wire 32 "V rdata [31:0] $end
     $var wire  1 "L ready $end
     $var wire  1 "i rst $end
     $var wire 32 ( wdata [31:0] $end
    $upscope $end
    $scope module PC_ADD $end
     $var wire 32 "I pc [31:0] $end
     $var wire 32 "J pc_next [31:0] $end
    $upscope $end
    $scope module PC_REG $end
     $var wire  1 "h clk_i $end
     $var wire 32 "H pc_i [31:0] $end
     $var wire 32 "I pc_o [31:0] $end
     $var wire  1 "i rst_i $end
     $var wire  1 "5 stall $end
    $upscope $end
    $scope module PC_SOURCE $end
     $var wire 32 "J in0 [31:0] $end
     $var wire 32 #" in1 [31:0] $end
     $var wire 32 ## in2 [31:0] $end
     $var wire 32 #& in3 [31:0] $end
     $var wire 32 "H out [31:0] $end
     $var wire  2 #$ sel [1:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#500
b00000000000000000000000000000000 #
b1111 $
1%
b00000000000000000000000000000000 &
b1111 '
b00000000000000000000000000000000 (
b1000000000000000000000000000000000000000000000000000000000000000 )
b00000000000000000000000000000000 +
0,
b0000 -
0.
0/
00
b000000 1
02
03
04
b000 5
06
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000010 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000100 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b000 W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
1u
0v
0w
0x
0y
0z
0{
0|
0}
0~
0"!
0""
0"#
0"$
1"%
0"&
0"'
0"(
0")
0"*
0"+
0",
0"-
1".
1"/
0"0
0"1
0"2
0"3
0"4
1"5
b00000000000000000000000000000000 "6
0"7
0"8
0"9
b00000000000000000000000000000000 ":
b00000 ";
b000 "<
b00000000000000000000000000000000 "=
b00000000000000000000000000000000 ">
b00000000000000000000000000000000 "?
b00000000000000000000000000000000 "@
0"A
b00000000000000000000000000000000 "B
b00000000000000000000000000000000 "C
b00000000000000000000000000000000 "D
b00000000000000000000000000110011 "E
0"F
0"G
b00000000000000000000000000000100 "H
b00000000000000000000000000000000 "I
b00000000000000000000000000000100 "J
b00000000000000000000000000000000 "K
0"L
0"M
0"N
1"O
0"P
b00000000000000000000000000000000 "Q
b00000000000000000000000000000000 "R
0"S
0"T
0"U
b00000000000000000000000000000000 "V
b00 "W
b00 "X
0"Y
b00000 "Z
b00000 "[
0"\
0"]
0"^
b0110011 "_
b000 "`
b0000000 "a
1"b
0"c
b00000000000000000000000000000000 "d
0"e
0"f
0"g
1"h
1"i
b00000000000000000000000000000000 "j
b00000000000000000000000000000000 "k
b0000 "l
b00000 "m
0"n
b000000 "o
0"p
0"q
0"r
0"s
0"t
0"u
0"v
0"w
b000 "x
0"y
0"z
0"{
0"|
0"}
0"~
0#!
b00000000000000000000000000000000 #"
b00000000000000000000000000000000 ##
b00 #$
b00000000000000000000000000000000 #%
b00000000000000000000000000000000 #&
b00000000000000000000000000000000 #'
b00000000000000000000000000000000 #(
0#)
0#*
0#+
0#,
0#-
0#.
b00000000000000000000000000000000 #/
0#0
0#1
b00 #2
b01 #3
b10 #4
b11 #5
b1000000000000000000000000000000000000000000000000000000000000000 #6
b00000000000000000000000000110011 #8
b00000000000000000000000000000000 #9
0#:
b00000000 #;
b00000000 #<
b0 #=
b1 #>
0#?
b00000000000000000000000000000000 #@
b00000 #A
0#B
0#C
b00000000000000000000000000000000 #D
b00000000000000000000000000000000 #E
b00000 #F
b00000000000000000000000000000000 #G
b00000000000000000000000000000000 #H
0#I
b001 #J
b010 #K
b011 #L
b100 #M
b101 #N
b110 #O
b000 #P
0#Q
0#R
0#S
0#T
0#U
#1000
0"h
#1500
1"h
#1500
#2000
0"h
#2500
1"h
#2500
#3000
0"h
#3500
1"h
#3500
#4000
0"h
#4500
1"h
#4500
#5000
0"h
#5500
1"h
#5500
0"i
#6000
0"h
#6500
b0100000000000000000000000000000000000000000000000000000000000000 )
b00000000000000000001001010010111 "@
1"e
1"f
1"h
#6500
#7000
0"h
#7500
b0010000000000000000000000000000000000000000000000000000000000000 )
0"5
1"9
b00000000000000000001001010010111 "d
1"h
#7500
#8000
0"h
#8500
b1000000000000000000000000000000000000000000000000000000000000000 )
1,
1.
1/
1\
0u
0"/
1"0
1"5
b00000000000000000010000000000100 "6
0"9
b00000000000000000001000000000000 "=
b00000000000000000001000000000000 ">
b00000000000000000010000000000000 "?
b00000000000000000000000000000100 "D
b00000000000000000001001010010111 "E
b00000000000000000000000000001000 "H
b00000000000000000000000000000100 "I
b00000000000000000000000000001000 "J
1"L
1"Y
b00101 "[
b0010111 "_
b001 "`
0"b
0"e
0"f
1"h
#8500
#9000
0"h
#9500
b0100000000000000000000000000000000000000000000000000000000000000 )
b00000000101101010111000001100011 "@
1"G
b00000000000000000000000000000100 "K
0"L
0"Y
1"e
1"f
1"h
b00000000000000000001000000000000 "k
b00101 "m
1"n
#9500
#10000
0"h
#10500
b0010000000000000000000000000000000000000000000000000000000000000 )
0"5
1"9
0"G
b00000000101101010111000001100011 "d
1"h
1"{
